the worst solution for (With) function that are responsible for returning json array of one to many relation

    public function NullRelatedModelObj($relatedModel , $jsonObj){
        $relatedTableColumns = $this->getAllColumns($relatedModel);
        $count = [];

        for($i = 0; $i < sizeof($jsonObj); ++$i){
             for($j = 0; $j < sizeof($relatedTableColumns); ++$j){
                 if($jsonObj[$i][$relatedTableColumns[$j]] === null){
                     array_push($count , 0);
                 }else{
                     array_push($count , 1);
                 }
             }

             if (in_array(0, $count)){
                 for($j = 0; $j < sizeof($relatedTableColumns); ++$j){
                     unset($jsonObj[$i][$relatedTableColumns[$j]]);
                 }
                 $jsonObj[$i][$relatedModel] = null;
             }

             $count = [];
        }

        return $jsonObj;
    }

    public function ComposeRelatedModelObject($relatedModel , $jsonObj){
        $relatedTableColumns = $this->getAllColumns($relatedModel);
        $orders = [];

        for($i = 0; $i<sizeof($jsonObj); $i++){
            if(array_key_exists($relatedModel ,$jsonObj[$i])){
                continue;
            }

            for($j = 0; $j < sizeof($relatedTableColumns); $j++){
                $orders[$j][$relatedTableColumns[$j]] = $jsonObj[$i][$relatedTableColumns[$j]];
                unset($jsonObj[$i][$relatedTableColumns[$j]]);
            }

            $finArr = [];
            for($j = 0; $j < sizeof($orders); $j++){
                  $finArr[$relatedTableColumns[$j]] = $orders[$j][$relatedTableColumns[$j]];
            }

            $jsonObj[$i][$relatedModel] = [$finArr];
            $orders = [];
        }
        return $jsonObj;
    }

    public function GatherRelatedObjects($relatedModel , $jsonObj){
        $relatedTableColumns = $this->getAllColumns($relatedModel);

        $orders = [];
        $temp = 0;
        for($i = 0; $i < sizeof($jsonObj); $i++){

            if($jsonObj[$i][$relatedModel] === null){
                continue;
            }

            if($jsonObj[$i][$this->table.'_id'] === $jsonObj[$i+1][$this->table.'_id']){
                for($j = 0; $j < sizeof($jsonObj[$i]['orders']); $j++){
                    $orders[$temp] = $jsonObj[$i][$relatedModel][$j];
                    $temp++;
                }
                unset($jsonObj[$i]);
            }else{
                if(empty($orders)){
                    continue;
                }else{
                    for($j = 0; $j < sizeof($orders); $j++){
                        array_push($jsonObj[$i][$relatedModel] , $orders[$j]);
                    }
                }
            }

        }
        return $jsonObj;
    }